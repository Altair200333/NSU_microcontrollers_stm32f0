#include <stm32f0xx.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct 
{
	uint32_t counter;
} Context;

void init(void);
void loop(Context*);
void resetAll(void);

//set and reset bit for volatile uint32_t
void setBitV(volatile uint32_t* bit, uint32_t value);
void resetBitV(volatile uint32_t* bit, uint32_t value);
void wait(uint32_t);
bool buttonDown(void);
void SysTick_Handler (void);
void fetchButtons(void);

#define LED GPIOC->ODR
#define F_CPU 		72000000UL	
#define Rled GPIO_ODR_6
#define Oled GPIO_ODR_8
#define Bled GPIO_ODR_7
#define Gled GPIO_ODR_9

void setBitV(volatile uint32_t* bit, uint32_t value)
{
	*bit |= value;
}
void resetBitV(volatile uint32_t* bit, uint32_t value)
{
	*bit &= ~value;
}

static volatile uint32_t timestamp = 0;
  

void wait(uint32_t delay)
{
	uint32_t delaystamp = timestamp + delay;
	while(1)
	{
		 if (timestamp > delaystamp)
		 {
				break;
		 }
	}
}
void resetAll()
{
	for(unsigned long i =0;i<15;++i)
	{
		GPIOC->MODER |= GPIO_MODER_MODER0+i;
	}
}

void init(void)
{
	//resetAll();
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOAEN;	//PC6 - LED
	
	GPIOC->MODER &= ~GPIO_MODER_MODER0;
	GPIOC->MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0 | GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0;//enable ports
	
	//GPIOC->OTYPER &= ~(GPIO_OTYPER_OT_8 | ~GPIO_OTYPER_OT_9);
	
	SystemInit(); // Device initialization
	SystemCoreClockUpdate(); // Clock setup
	if (SysTick_Config (SystemCoreClock / 1000)) { // SysTick 1ms
	  // Handle Error
	}

	//--------

	GPIOA->MODER |= GPIO_MODER_MODER15_0;
	GPIOA->MODER &= ~GPIO_MODER_MODER4;
	GPIOA->MODER &= ~GPIO_MODER_MODER5;
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR4_1 | GPIO_PUPDR_PUPDR5_1;
	GPIOC->MODER |= GPIO_MODER_MODER12_0;
}

bool buttonDown()
{
	return GPIOA->IDR & GPIO_IDR_0;
}

static volatile uint32_t state = 0;
//static volatile bool keys[4] = {0}; 
//static volatile bool prev[4] = {0}; 

typedef struct 
{
	bool prevState;
	bool state;
	uint32_t lastChangeTime;
} keyState;

static volatile keyState keyStates[4] = {0}; 

void fetchButtons()
{
	for(int i=0;i<4;++i)
		prev[i] = keys[i];
	keys[0] = keys[1] = keys[2] = keys[3] = false;
	
	GPIOA->ODR |= GPIO_ODR_15;
	GPIOC->ODR &= ~GPIO_ODR_12;
	wait(1);
  //wait
	keys[0] = GPIOA->IDR & GPIO_IDR_4;
	keys[1] = GPIOA->IDR & GPIO_IDR_5;

	GPIOA->ODR &= ~GPIO_ODR_15;
	GPIOC->ODR |= GPIO_ODR_12;
	wait(1);
	//wait
	keys[2] = GPIOA->IDR & GPIO_IDR_4;
	keys[3] = GPIOA->IDR & GPIO_IDR_5;

  GPIOA->ODR &= ~GPIO_ODR_15;
	GPIOC->ODR &= ~GPIO_ODR_12;
}
void SysTick_Handler (void)
{
   timestamp++;
	 //fetchButtons();
}

static volatile bool states[4] = {0};

void loop(Context* context)
{
	uint32_t leds[4] = {Rled, Gled, Bled, Oled};
	fetchButtons();

	if(buttonDown())
	{
		setBitV(&LED, Rled);
	}
	else
	{
		resetBitV(&LED, Rled);
	}
	
	for (int i = 0; i < 4; ++i)
	{
		if(keys[i] && !prev[i])
		{
			states[i] = !states[i];
		}
			
	}
	for (int i = 0; i < 4; ++i)
	{
		if(states[i])
		{
			setBitV(&LED, leds[i]);
		}
		else
			resetBitV(&LED, leds[i]);
	}
	
	wait(20);
}	

int main(void)
{
	
	Context* context = (Context*)malloc(sizeof(Context));
	context->counter = 0;
	
	init();
	
	while(1)
	{
		loop(context);
	}
}
