#include <stm32f0xx.h>
#include <stdlib.h>
#include <stdbool.h>
typedef struct 
{
	uint32_t counter;
} Context;

void init(void);
void loop(Context*);
void resetAll(void);

//set and reset bit for volatile uint32_t
void setBitV(volatile uint32_t* bit, uint32_t value);
void resetBitV(volatile uint32_t* bit, uint32_t value);
void wait(uint32_t);
bool buttonDown(void);
void SysTick_Handler (void);
void traffic(void);
void SysTick_Init(void);
void SysTick_Wait(uint32_t);


#define LED GPIOC->ODR
#define F_CPU 		72000000UL	
#define Rled GPIO_ODR_6
#define Oled GPIO_ODR_8
#define Bled GPIO_ODR_7
#define Gled GPIO_ODR_9

void setBitV(volatile uint32_t* bit, uint32_t value)
{
	*bit |= value;
}
void resetBitV(volatile uint32_t* bit, uint32_t value)
{
	*bit &= ~value;
}

static volatile uint32_t timestamp = 0;
  
void SysTick_Handler (void)
{
   timestamp++;
}
void SysTick_Wait(uint32_t n)
{
 SysTick->LOAD = n-1;
 SysTick->VAL = 0; // clear Count
 while((SysTick->CTRL&0x00010000)== 0)
 {}
}
void wait(uint32_t delay)
{
	uint32_t delaystamp = timestamp + delay;
	while(1)
	{
		 if (timestamp > delaystamp)
		 {
				break;
		 }
	}
}
void resetAll()
{
	for(unsigned long i =0;i<15;++i)
	{
		GPIOC->MODER |= GPIO_MODER_MODER0+i;
	}
}

void init(void)
{
	resetAll();
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOAEN;	//PC6 - LED
	
	GPIOC->MODER &= ~GPIO_MODER_MODER0;
	GPIOC->MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0 | GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0;//enable ports
	
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT_8 | ~GPIO_OTYPER_OT_9);
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR8 | GPIO_PUPDR_PUPDR9);
	
	//SystemInit(); // Device initialization
	SystemCoreClockUpdate(); // Clock setup

	SysTick_Init();
}
void SysTick_Init(void)
{
	uint32_t period = SystemCoreClock/20;
	SysTick->LOAD = period-1;
	SysTick->VAL = period-1;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
}

bool buttonDown()
{
	return GPIOA->IDR & GPIO_IDR_0;
}

static volatile uint32_t state = 0;
void traffic()
{
	if(state<20)
	{
		setBitV(&LED, Rled);
		//wait(2);
	}
	else if(state>=20 && state <=50)
	{
		if(state<25)
		{
			setBitV(&LED, Oled);
		}
		else if(state<30)
		{
			resetBitV(&LED, Oled);
		}
		else if(state<35)
		{
			setBitV(&LED, Oled);
		}
		else if(state<40)
		{
			resetBitV(&LED, Oled);
		}
		else if(state<45)
		{
			setBitV(&LED, Oled);
		}
		else
		{
			resetBitV(&LED, Oled);
			resetBitV(&LED, Rled);
		}
		//wait(8);
	}
	else if(state>=50 && state<=90)
	{
		if(state<55)
		{
			setBitV(&LED, Gled);
		}
		else if(state<65)
		{
			setBitV(&LED, Gled);
		}
		else if(state<70)
		{
			resetBitV(&LED, Gled);
		}
		else if(state<75)
		{
			setBitV(&LED, Gled);
		}
		else if(state<80)
		{
			resetBitV(&LED, Gled);
		}
		else if(state<85)
		{
			setBitV(&LED, Gled);
		}
		if(state == 90)
		{
			resetBitV(&LED, Gled);
		}
		//wait(8);
	}
	else
	{
		state = 0;
	}
	if(SysTick-> CTRL & SysTick_CTRL_COUNTFLAG_Msk)
	{
		state++;
	}
	
}
void loop(Context* context)
{
	if(buttonDown())
	{
		setBitV(&LED, Bled);
	}
	else
	{
		resetBitV(&LED, Bled);
	}
		
	traffic();
}	

int main(void)
{
	
	Context* context = (Context*)malloc(sizeof(Context));
	context->counter = 0;
	
	init();
	
	while(1)
	{
		loop(context);
	}
}
